Q. Nodes Count

Problem Description
You are given the root node of a binary tree A. You have to find the number of nodes in this tree.

Problem Constraints
1 <= Number of nodes in the tree <= 105
0 <= Value of each node <= 107

Input Format
The first and only argument is a tree node A.

Output Format
Return an integer denoting the number of nodes of the tree.

Example Input
Input 1:
 Values =  1 
          / \     
         4   3                        
Input 2:
 Values =  1      
          / \     
         4   3                       
        /         
       2                                     

Example Output
Output 1:
 3 
Output 2:
 4 

Example Explanation
Explanation 1:
Clearly, there are 3 nodes 1, 4 and 3.
Explanation 2:
Clearly, there are 4 nodes 1, 4, 3 and 2.

------------------------------------------------------------------------------------------------------------

Solution Code: (C#)
/**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
class Solution {
    public int solve(TreeNode a) 
    {
        // idea is simple...recursively go to every node and keep on increamenting the count
        return countNodes(a);
    }

    public int countNodes(TreeNode a)
    {
        int ans = 0;

        // count the current root node
        if(a != null) ans++;

        // if it is a leaf node, return the answer
        if(a.left == null && a.right == null) return ans;

        // count the nodes in LST (left subtree)
        if(a.left != null) ans += countNodes(a.left);

        // count the nodes in RST (right subtree)
        if(a.right != null) ans += countNodes(a.right);

        return ans;
    }
}

/// let N is no. of nodes in the tree
/// TC = 1 total tree traversal = O(N)
/// SC = stack space = O(height of tree) = O(H)
