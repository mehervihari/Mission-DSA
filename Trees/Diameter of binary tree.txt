Q. Diameter of binary tree

Problem Description
Given a Binary Tree A consisting of N integer nodes, you need to find the diameter of the tree.
The diameter of a tree is the number of edges on the longest path between two nodes in the tree.

Problem Constraints
0 <= N <= 105

Input Format
First and only Argument represents the root of binary tree A.

Output Format
Return an single integer denoting the diameter of the tree.

Example Input
Input 1:
           1
         /   \
        2     3
       / \
      4   5
Input 2:
            1
          /   \
         2     3
        / \     \
       4   5     6

Example Output
Output 1:
 3
Output 2:
 4

Example Explanation
Explanation 1:
 Longest Path in the tree is 4 -> 2 -> 1 -> 3 and the number of edges in this path is 3 so diameter is 3.
Explanation 2:
 Longest Path in the tree is 4 -> 2 -> 1 -> 3 -> 6 and the number of edges in this path is 4 so diameter is 4.

----------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    int dia = 0;
    public int solve(TreeNode root) {
        // idea is to 1st find the longest path b/w 2 nodes passing through the root === height(left sub tree(LST)) + height(right sub tree(RST)) + 2
        // now find the longest path b/w 2 nodes in the LST and
        // also find the longest path b/w 2 nodes in the RST
        // longest among these three longest paths is the diameter (answer)

        // base case
        if(root == null) return 0;
        
        int currdia = height(root.left) + height(root.right) + 2;

        int ldia = solve(root.left);
        int rdia = solve(root.right);
        
        // comparing all the longest paths and choosing the longest among them
        dia = Math.max(currdia, Math.max(ldia, rdia));
        
        return dia;
    }

    // recursive code to find tree's height
    int height(TreeNode node)
    {
        if(node == null) return -1;
        
        int lh = height(node.left);
        int rh = height(node.right);
        
        return Math.max(lh, rh) + 1;
    }
}

/// if N is the no.of nodes in the tree
/// TC = every node is touched at;east once and for every node its height is also being calcualted = O(N2)
/// SC = call stack space = O(Height of the tree) = O(H)
