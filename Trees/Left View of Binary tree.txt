Q. Left View of Binary tree

Problem Description
Given a binary tree of integers. Return an array of integers representing the left view of the Binary tree.
Left view of a Binary Tree is a set of nodes visible when the tree is visited from Left side
NOTE: The value comes first in the array which have lower level.

Problem Constraints
1 <= Number of nodes in binary tree <= 100000
0 <= node values <= 109

Input Format
First and only argument is a root node of the binary tree, A.

Output Format
Return an integer array denoting the left view of the Binary tree.

Example Input
Input 1:

            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

            1
           /  \
          2    3
           \
            4
             \
              5

Example Output
Output 1:
 [1, 2, 4, 8]
Output 2:
 [1, 2, 4, 5]

Example Explanation
Explanation 1, 2:
 The Left view of the binary tree is returned.
--------------------------------------------------------------------------------------------------------------------------------
Solution code: (JAVA)
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int[] solve(TreeNode a) 
    {
        // idea is to do Breadth First Search (BFS) of the binary tree which
        // means to traverse the tree level-wise horizontally and
        // first element of every level is our answer

        // maintain a Queue in which a node is added and removed but while removing, add its children to the Queue
        Queue<TreeNode> q = new LinkedList<>();
        ArrayList<Integer> leftView = new ArrayList<Integer>();
        
        if(a == null) return new int[0];

        // adding a null node to the Queue enables us to distinguish a new level 
        q.add(a); q.add(null); leftView.add(a.val);
        boolean isNull = false;

        while(q.size() > 1)
        {
            TreeNode f = q.poll();

            // when a null node is encountered, it means previous level has ended and a new level is going to start
            if(f == null)
            {
                isNull = true;
                q.add(null);
            }
            else
            {
                if(isNull)
                { 
                    leftView.add(f.val); isNull = false; 
                }
                if(f.left != null) q.add(f.left);
                if(f.right != null) q.add(f.right);
            }
        }

        // creating our answer as required using the list
        int[] ans = new int[leftView.size()]; 
        for(int i=0; i< leftView.size(); i++)
        {
            ans[i] = leftView.get(i);
        }
        return ans;
    }
}

/// N is tree size
/// TC = time to traverse the tree = O(N)
/// SC = extra space for Queue = O(N)
