Q. Inorder Traversal

Problem Description
Given a binary tree, return the inorder traversal of its nodes' values.
NOTE: Using recursion is not allowed.

Problem Constraints
1 <= number of nodes <= 105

Input Format
First and only argument is root node of the binary tree, A.

Output Format
Return an integer array denoting the inorder traversal of the given binary tree.

Example Input
Input 1:

   1
    \
     2
    /
   3
Input 2:
   1
  / \
 6   2
    /
   3

Example Output
Output 1:
 [1, 3, 2]
Output 2:
 [6, 1, 3, 2]

Example Explanation
Explanation 1:
 The Inorder Traversal of the given tree is [1, 3, 2].
Explanation 2:
 The Inorder Traversal of the given tree is [6, 1, 3, 2].

------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */

// custom class to store the state of a particular node
class Pair{
    TreeNode root;
    int state;
    Pair(TreeNode node)
    {
        root = node;
        state = 1;
    }
}
 
public class Solution {
    public int[] inorderTraversal(TreeNode root) {
        // idea is to store the state of every node and 
        // based on the state in which a node is, perform tasks accordingly
        /* states & tasks mapping:
           state-1 = task-1 = to store the left node to the Stack
           state-2 = task-2 = to print or add to answerlist, the node value itself
           state-3 = task-3 = to store the right node to the Stack
           state-4 = task-4 = all tasks are performed and node should be removed from the stack
        */

        ArrayList<Integer> ans = new ArrayList<Integer>();

        // a stack of type custom class Pair, to store the nodes and their states
        Stack<Pair> s = new Stack<>();
        Pair pair = new Pair(root);
        s.push(pair);
        
        while(s.size() > 0)
        {
            Pair t = s.peek();
            
            if(t.state == 1)
            {
                t.state++;
                if(t.root.left != null)
                {
                    Pair p = new Pair(t.root.left);
                    s.push(p);
                }
            }
            else if(t.state == 2)
            {
                t.state++;
                ans.add(t.root.val);
            }
            else if(t.state == 3)
            {
                t.state++;
                if(t.root.right != null)
                {
                    Pair p = new Pair(t.root.right);
                    s.push(p);
                }
            }
            else
            {
                s.pop();
            }
        }
        return ans.stream().mapToInt(x->x).toArray();
    }
}

/// N is no. of nodes in the tree
/// TC = touching every node of the tree once = O(N)
/// SC = space for stack = O(N)
