Q. Odd and Even Levels

Problem Description
Given a binary tree of integers. Find the difference between the sum of nodes at odd level and sum of nodes at even level.
NOTE: Consider the level of root node as 1.

Problem Constraints
1 <= Number of nodes in binary tree <= 100000
0 <= node values <= 109

Input Format
First and only argument is a root node of the binary tree, A

Output Format
Return an integer denoting the difference between the sum of nodes at odd level and sum of nodes at even level.

Example Input
Input 1:
        1
      /   \
     2     3
    / \   / \
   4   5 6   7
  /
 8 
Input 2:
        1
       / \
      2   10
       \
        4

Example Output
Output 1:
 10
Output 2:
 -7

Example Explanation
Explanation 1:
 Sum of nodes at odd level = 23
 Sum of ndoes at even level = 13
Explanation 2:
 Sum of nodes at odd level = 5
 Sum of ndoes at even level = 12

-----------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int solve(TreeNode a) {
        // idea is same as level order traversal
        // do the level order traversal of tree, store the sum of elements level-wise in a HashMap
        // calculate the required difference using this hashmap in which
        // sum of level-wise elements are stored along with its level number

        Queue<TreeNode> q = new LinkedList<TreeNode>();
        HashMap<Integer, Long> hmap = new HashMap<>();
        int currlevel = 0;
        
        q.add(a); q.add(null);
        while(q.size() > 1)
        {
            TreeNode f = q.poll();
            
            if(f == null)
            {
                currlevel++;
                q.add(null);
            }
            else
            {
                if(f.left != null) q.add(f.left);
                if(f.right != null) q.add(f.right);
                
                if(!hmap.containsKey(currlevel))
                {
                    hmap.put(currlevel, (long)f.val);
                }
                else hmap.put(currlevel, hmap.get(currlevel) + f.val);
            }
        }
        
        long even = 0, odd = 0;
        for(int i=0; i< hmap.size(); i++)
        {
            if(i % 2 == 0) odd += hmap.get(i);
            else even += hmap.get(i);
        }
        return (int)(odd - even);
    }
}

/// N is no. of nodes in the tree
/// TC = touching every node atleast once = O(N)
/// SC = hashmap space = O(N)
