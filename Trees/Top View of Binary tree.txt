Q. Top View of Binary tree

Problem Description
Given a binary tree of integers denoted by root A. Return an array of integers representing the top view of the Binary tree.
The top view of a Binary Tree is a set of nodes visible when the tree is visited from the top.
Return the nodes in any order.

Problem Constraints
1 <= Number of nodes in binary tree <= 100000
0 <= node values <= 10^9

Input Format
First and only argument is head of the binary tree A.

Output Format
Return an array, representing the top view of the binary tree.

Example Input
Input 1:

            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

            1
           /  \
          2    3
           \
            4
             \
              5

Example Output
Output 1:
 [1, 2, 4, 8, 3, 7]
Output 2:
 [1, 2, 3]

Example Explanation
Explanation 1:
Top view is described.
Explanation 2:
Top view is described.

--------------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */

class Pair
{
    TreeNode node;
    int level;
    public Pair(TreeNode _node, int _level)
    {
        node = _node;
        level = _level;
    }
}

public class Solution {
    public int[] solve(TreeNode r) {
        // idea is simple...first element in every vertical level of the tree is the top view

        // using a hashmap and a Queue of custom type, store the elements of the tree in vertical level-wise
        // i.e. store the pair of node value and its level with respect to the vertical distance from root
        HashMap<Integer, List<Integer>> hmap = new HashMap<>();
        Queue<Pair> q = new LinkedList<>();
        int minl = 0, maxl = 0;
        
        q.add(new Pair(r, 0));
        while(q.size() > 0)
        {
            Pair pair = q.peek();
            q.remove();
            
            TreeNode t = pair.node; int lev = pair.level;
            minl = Math.min(minl, lev); maxl = Math.max(maxl, lev);
            
            if(t.left != null)
            {
                // level decreases by 1, as you move 1 node horizontally from root towards left
                // level of root element is 0 and for the element that is 1 egde apart, the level becomes -1 to left
                q.add(new Pair(t.left, lev-1));
            }
            
            if(t.right != null)
            {
                // level increases by 1, as you move 1 node horizontally from root towards right
                // level of root element is 0 and for the element that is 1 egde apart, the level becomes +1 to right
                q.add(new Pair(t.right, lev+1));    
            }

            if(!hmap.containsKey(lev))
            {
                List<Integer> tlist = new ArrayList<>(); 
                tlist.add(t.val);
                hmap.put(lev, tlist);
            }
            else{
                hmap.get(lev).add(t.val);
            }
        }
        
        // retrive the first element of every vertical level
        int[] ans = new int[hmap.size()]; int idx = 0;
        for(int i=minl; i<= maxl; i++)
        {
            ans[idx++] = hmap.get(i).get(0);
        }
        return ans;
    }
}

/// N is no. of nodes in the tree
/// TC = for level order traversal = O(N)
/// SC = for map and Queue = O(N)