Q.Distinct Numbers in Window

Problem Description
You are given an array of N integers, A1, A2 ,..., AN and an integer B. Return the of count of distinct numbers in all windows of size B.
Formally, return an array of size N-B+1 where i'th element in this array contains number of distinct elements in sequence Ai, Ai+1 ,..., Ai+B-1.

NOTE: if B > N, return an empty array.

Input Format
First argument is an integer array A
Second argument is an integer B.

Output Format
Return an integer array.

Example Input
Input 1:
 A = [1, 2, 1, 3, 4, 3]
 B = 3

Input 2:
 A = [1, 1, 2, 2]
 B = 1

Example Output
Output 1:
 [2, 3, 3, 2]

Output 2:
 [1, 1, 1, 1]


Example Explanation
Explanation 1:
 A=[1, 2, 1, 3, 4, 3] and B = 3
 All windows of size B are
 [1, 2, 1]
 [2, 1, 3]
 [1, 3, 4]
 [3, 4, 3]
 So, we return an array [2, 3, 3, 2].

Explanation 2:
 Window size is 1, so the output array is [1, 1, 1, 1].
----------------------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    public int[] dNums(int[] a, int b) {
        int n = a.length; int[] ans = new int[n-b+1];

        // a hashmap that stores frequemcy of A
        HashMap<Integer, Integer> amap = new HashMap<>();
        // process the first window of size B
        for(int i=0; i <b; i++)
        {
            if(!amap.containsKey(a[i]))
                amap.put(a[i], 1);
            else amap.put(a[i], amap.get(a[i])+1);
        }        
        ans[0] = amap.size();
        
        // process the other windows of size B
        for(int i=1; i<= n-b; i++)
        {
            // increament the frequemcy of last element of the new window
            if(!amap.containsKey(a[i+b-1]))
                amap.put(a[i+b-1], 1);
            else amap.put(a[i+b-1], amap.get(a[i+b-1])+1);

            // decreament the frequemcy of first element of the previous window and
            amap.put(a[i-1], amap.get(a[i-1])-1);

            // if that frequemcy becomes zero remove it from the map (so that we don't count it)
            if(amap.get(a[i-1]) <= 0)
                amap.remove(a[i-1]);
            
            ans[i] = amap.size();
        }
        return ans;
    }
}

/// n is the input size
/// TC = O(n)
/// SC = extra space for hashmap, ans = O(n)