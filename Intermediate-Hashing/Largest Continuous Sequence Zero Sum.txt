Q. Largest Continuous Sequence Zero Sum

Problem Description
Given an array A of N integers.
Find the largest continuous sequence in a array which sums to zero.

Problem Constraints
1 <= N <= 106
-107 <= A[i] <= 107

Input Format
Single argument which is an integer array A.

Output Format
Return an array denoting the longest continuous sequence with total sum of zero.

NOTE : If there are multiple correct answers, return the sequence which occurs first in the array.

Example Input
A = [1,2,-2,4,-4]

Example Output
[2,-2,4,-4]

Example Explanation
[2,-2,4,-4] is the longest sequence with total sum of zero.

----------------------------------------------------------------------------------------------------------------------------------------
Solution Code
public class Solution {
    public int[] lszero(int[] a) 
    {
        int n = a.length;

        // idea is to use the prefix sum array...if there are repeated numbers or 0s in the prefix sum array, it means 0 sum subarray exists
        // a[i] + a[i+1] + .... + a[j] = prefixsum[j] - prefixsum[i-1] if i != 0
        //                             = prefixsum[j] if i == 0

        // how to calculate prefixsum array ?
        // int[] prefixsum = new int[n]; prefixsum[0] = a[0];
        // for(int i=1; i<n; i++)
        // {
        //     prefixsum[i] = prefixsum[i-1] + a[i];
        // }
        
        // travers the given array, keep adding its element's prefix sum to a hashmap along with their index
        // while adding, if you find that, that prefix sum already exists in the hashmap, it means 0 sum subarray is encountered and
        // you have to check its length and update the start, maxlength accordingly

        // initialize the start index, length of required subarray...calculate the prefixsum on the fly
        int start = 0, maxlength = 0; int sum = 0;
        HashMap<Integer, Integer> hmap = new HashMap<Integer, Integer>();

        for(int i=0; i<n; i++)
        {
            sum += a[i];
            if(sum == 0){
                if(i + 1 > maxlength)
                {
                    start = 0;
                    maxlength = i + 1;
                }
            }
            if(!hmap.containsKey(sum))
            {
                hmap.put(sum, i);
                
            }
            else{
                
                if((i - hmap.get(sum)) > maxlength)
                {
                    start = hmap.get(sum) + 1;
                    maxlength = (i - hmap.get(sum));
                }
            }
        }
        
        int[] ans = new int[maxlength];
        if(maxlength > 0)
        {
            // making the ans array
            for(int i=0; i< maxlength; i++)
            {
                ans[i] = a[start + i];
            }
        }
        
        return ans;        
    }
}

// n is array size
// TC = O(n)  since we are traversing the array once
// SC = O(n)  since a hashmap is used whose size is atmost the array size
