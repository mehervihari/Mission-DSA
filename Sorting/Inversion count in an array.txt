Q. Inversion count in an array

Problem Description
Given an array of integers A. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. Find the total number of inversions of A modulo (109 + 7).

Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9

Input Format
The only argument given is the integer array A.

Output Format
Return the number of inversions of A modulo (109 + 7).

Example Input
Input 1:
A = [3, 2, 1]
Input 2:
A = [1, 2, 3]

Example Output
Output 1:
3
Output 2:
0

Example Explanation
Explanation 1:
 All pairs are inversions.
Explanation 2:
 No inversions.
---------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    public int solve(int[] a) {
        return merge_sort(a, 0, a.length-1);
    }

    public int merge_sort(int[] a, int start, int end)
    {
        if(start == end) return 0;
        int mod = 1000000007;
        //split
        int mid = start + (end - start)/2;
        
        //sort ...also count inversions while sorting
        int inversions = merge_sort(a, start, mid) % mod;
        inversions += merge_sort(a, mid+1, end) % mod;

        //merge the splited arrays... this also gives us the #cross-inversions
        inversions += merge(a, start, mid, end) % mod;

        return (int)(inversions % mod);
    }
    
    public int merge(int[] a, int start, int mid, int end)
    {
        int mod = 1000000007;
        //Initialize i, j, k
        int i = start, j = mid + 1, k = 0;
        int inversions = 0;

        //create a temp array to copy the elements of A from start to end
        int[] temp = new int[end - start + 1];
        int tn = temp.length;

        // count the pairs before merging
        while(i <= mid && j <= end)
        {
            if(a[i] <= a[j])
            {
                i++;
            }
            else{
                j++; // be very careful with inversions calculation...check corner cases
                inversions += (mid - i + 1) % mod;
            }
        }

        // i, j have to be re-initialized and
        // carry on the merge process
        i = start; j = mid + 1;
        while(i <= mid && j <= end)
        {
            if(a[i] <= a[j])
            {
                temp[k] = a[i]; i++;
            }
            else{
                temp[k] = a[j]; j++;
            }
            k++;
        }

        while(i <= mid)
        {
            temp[k] = a[i]; k++; i++;
        }

        while(j <= end)
        {
            temp[k] = a[j]; k++; j++;
        }

        // copy temp array to original array
        for(int c = 0; c < tn; c++)
        {
            a[start + c] = temp[c];
        }

        return inversions % mod;
    }
}

/// N is input array size
/// TC = time for merge sort = O(NlogN)
/// SC = space for temp array in merge function = O(N)