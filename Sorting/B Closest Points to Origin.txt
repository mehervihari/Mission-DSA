Q. B Closest Points to Origin

Problem Description
We have a list A of points (x, y) on the plane. Find the B closest points to the origin (0, 0).
Here, the distance between two points on a plane is the Euclidean distance.
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)
NOTE: Euclidean distance between two points P1(x1, y1) and P2(x2, y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).

Problem Constraints
1 <= B <= length of the list A <= 105
-105 <= A[i][0] <= 105
-105 <= A[i][1] <= 105

Input Format
The argument given is list A and an integer B.

Output Format
Return the B closest points to the origin (0, 0) in any order.

Example Input
Input 1:
 A = [ 
       [1, 3],
       [-2, 2] 
     ]
 B = 1
Input 2:
 A = [
       [1, -1],
       [2, -1]
     ] 
 B = 1

Example Output
Output 1:
 [ [-2, 2] ]
Output 2:
 [ [1, -1] ]

Example Explanation
Explanation 1:
 The Euclidean distance will be sqrt(10) for point [1,3] and sqrt(8) for point [-2,2].
 So one closest point will be [-2,2].
Explanation 2:
 The Euclidean distance will be sqrt(2) for point [1,-1] and sqrt(5) for point [2,-1].
 So one closest point will be [1,-1].

-----------------------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    public int[][] solve(int[][] a, int b) {
        int n = a.length;
        // idea is to calculate the distances of all the given points from origin and store them in an array
        // now sort this array and
        // find 'B' points that are closes to origin
        double[] disarr = new double[n];
        int[][] ans = new int[b][2];

        for(int i=0; i<n; i++)
        {
            double dis = distance(0, 0, a[i][0], a[i][1]);
            disarr[i] = dis;           
        }

        Arrays.sort(disarr);

        // take the distance at 'B-1'th position as a reference and find the points accordingly
        double ref = disarr[b-1]; int idx = 0;

        for(int j=0; j<n; j++)
        {
            double dis = distance(0, 0, a[j][0], a[j][1]);
            if(dis <= ref)
            {
                ans[idx][0] = a[j][0];
                ans[idx][1] = a[j][1];
                idx++;
            }
        }
        return ans;
    }

    public double distance(int x1, int y1, int x2, int y2)
    {
        long c = (x1 - x2) * (x1 - x2);
        long d = (y1 - y2) * (y1 - y2);
        return (double)(c + d);
    }
}

/// N is no. of points given
/// TC = 2 array traversal = O(N)
/// SC = extra space for distance array = O(N)
