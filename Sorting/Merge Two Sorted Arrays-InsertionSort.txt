Q. Merge Two Sorted Arrays

Problem Description
Given two sorted integer arrays A and B, merge B and A as one sorted array and return it as an output.

Problem Constraints
-1010 <= A[i], B[i] <= 1010

Input Format
First Argument is a 1-D array representing A.
Second Argument is also a 1-D array representing B.

Output Format
Return a 1-D vector which you got after merging A and B.

Example Input
Input 1:
A = [4, 7, 9 ]
B = [2, 11, 19 ]
Input 2:
A = [1]
B = [2]

Example Output
Output 1:
[2, 4, 7, 9, 11, 19]
Output 2:
[1, 2]

Example Explanation
Explanation 1:
Merging A and B produces the output as described above.
Explanation 2:
 Merging A and B produces the output as described above.

-------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] solve(final int[] A, final int[] B) {
        int n = A.length, m = B.length;
        
        //concatenate A, B to form ans
        int[] ans = new int[n+m];
        for(int i=0; i<n; i++)
        {
            ans[i] = A[i];
        }
        for(int i=0; i<m; i++)
        {
            ans[i+n] = B[i];
        }

        return insertionSort(ans);
    }

    //sort the combined array
    
    // insertionSort works in a similar way to how playing cards are sorted in your hand and is preferred for smaller sized arrays
    // array is virtually split into sorted and un-sorted parts.
    // in every iteration an element is picked from un-sorted part and placed in sorted part
    public int[] insertionSort(int[] a)
    {
        int n = a.length;
        for(int i=1; i<n; i++)
        {
            int key = a[i];
            for(int j=i-1; j>=0; j--)
            {
                if(a[j] > key)
                {
                    a[j+1] = a[j];
                    a[j] = key;
                }
            }
        }
        return a;
    }
}

/// let N is size of array to be sorted
/// TC = best case = when array is already sorted, no swaps done = O(N)
/// TC = worst case = when array is reverse sorted = O(N2)
/// SC = constant extra space = O(1)
