Q. Count Rectangles **

Problem Description
Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in a 2-D Cartesian plane.
Find and return the number of unordered quadruplet (i, j, k, l) such that (A[i], B[i]), (A[j], B[j]), (A[k], B[k]) and (A[l], B[l]) form a 
rectangle with the rectangle having all the sides parallel to either x-axis or y-axis.

Problem Constraints
1 <= N <= 2000
0 <= A[i], B[i] <= 109

Input Format
The first argument given is the integer array A.
The second argument given is the integer array B.

Output Format
Return the number of unordered quadruplets that form a rectangle.

Example Input
Input 1:
 A = [1, 1, 2, 2]
 B = [1, 2, 1, 2]
Input 1:
 A = [1, 1, 2, 2, 3, 3]
 B = [1, 2, 1, 2, 1, 2]

Example Output
Output 1:
 1
Output 2:
 3

Example Explanation
Explanation 1:
 All four given points make a rectangle. So, the answer is 1.

Explanation 2:
 3 quadruplets which make a rectangle are: (1, 1), (2, 1), (2, 2), (1, 2)
                                           (1, 1), (3, 1), (3, 2), (1, 2)
                                           (2, 1), (3, 1), (3, 2), (2, 2)
------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    public int solve(int[] a, int[] b) {
        // a rectangle can be formed with 4 points and under given conditions, all the sides must be parallel to x, y-axes
        // which means the line passing through diagonal points cannot be parallel to x/ y-axes
        int n = a.length, m = b.length; int count = 0;
        
        // convert the points in A, B to pair of points and store all of them in a list
        List<List<Integer>> points = new ArrayList<>();

        // HashMap for storing the points along with their indices
        HashMap<List<Integer>, Integer> pmap = new HashMap<>();
        for(int i=0; i<n; i++)
        {
            List<Integer> currpoint = new ArrayList<>();
            currpoint.add(a[i]); currpoint.add(b[i]);

            points.add(currpoint);
            
            pmap.put(currpoint, i);
        }

        // traverse all the pair of points and
        // choose any 2 points pairs that can form a diagonal
        // for each top-left point
        for(int i=0; i<n; i++)
        {
            // for each bottom-right point
            for(int j=0; j<n; j++)
            {
                int x1 = points.get(i).get(0);
                int y1 = points.get(i).get(1);
                int x2 = points.get(j).get(0);
                int y2 = points.get(j).get(1);

                // points lying on same line and that line being parallel to x/ y axes cannot form a diagonal and hence no rectangle
                if(x1 == x2 || y1 == y2)
                    continue;
                
                // check for the existance of other 2 (top-right, bottom-left) points for the rectangle
                List<Integer> point1 = new ArrayList<>(); 
                point1.add(x1); point1.add(y2);

                List<Integer> point2 = new ArrayList<>();
                point2.add(x2); point2.add(y1);

                // if such points exists, we have a rectnagle
                if(pmap.containsKey(point1) && pmap.containsKey(point2))
                    count++;
            }
        }
        // every rectangle is counted 4 times
        return count/4;
    }
}

/// let N be the no. of points given
/// TC = every point is being checked with other points = O(N2)
/// SC = extra space to store points pairs = O(N) 
