Q. Check Palindrome - II

Problem Description
Given a string A consisting of lowercase characters.
Check if characters of the given string can be rearranged to form a palindrome.
Return 1 if it is possible to rearrange the characters of the string A such that it becomes a palindrome else return 0.

Problem Constraints
1 <= |A| <= 105
A consists only of lower-case characters.

Input Format
First argument is an string A.

Output Format
Return 1 if it is possible to rearrange the characters of the string A such that it becomes a palindrome else return 0.

Example Input
Input 1:
 A = "abcde"
Input 2:
 A = "abbaee"

Example Output
Output 1:
 0
Output 2:
 1

Example Explanation
Explanation 1:
 No possible rearrangement to make the string palindrome.
Explanation 2:
 Given string "abbaee" can be rearranged to "aebbea" to form a palindrome.

------------------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    public int solve(String a) {
        // idea is to store the frequencies of all characters of the string and
        // based on those frequencies, decide is its possible to rearrange the string to form a palindrome

        int n = a.length();
        HashMap<Character, Integer> freq = new HashMap<Character, Integer>();

        for(int i=0; i<n; i++)
        {
            if(!freq.containsKey(a.charAt(i)))
                freq.put(a.charAt(i), 0);
            freq.put(a.charAt(i), freq.get(a.charAt(i))+1);
        }

        // in a palindrome, every character's frequency should be even but
        // for odd length palindromes, one character can have odd frequency
        // maintain the count of characters having odd frequency

        int oddCount = 0;
        for(Map.Entry<Character, Integer> entry : freq.entrySet())
        {
            if(entry.getValue() % 2 != 0)
                oddCount++;
        }

        // if there are more than 1 characters whose frequency is odd, a palindrome can't be formed
        if(oddCount > 1)
            return 0;
        else return 1;
    }
}

/// N is the size of input string
/// TC = 1 string traversal + 1 HashMap traversal = O(N)
/// SC = extra space for freqeuncy hashmap = O(N)
