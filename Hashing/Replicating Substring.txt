Q. Replicating Substring

Problem Description
Given a string B, find if it is possible to re-order the characters of the string B so that 
it can be represented as a concatenation of A similar strings.
Eg: B = aabb and A = 2, then it is possible to re-arrange the string as "abab" which is a concatenation of 2 similar strings "ab".
If it is possible, return 1, else return -1.

Problem Constraints
1 <= Length of string B <= 1000
1 <= A <= 1000
All the alphabets of S are lower case (a - z)

Input Format
First argument is an integer A.
Second argument is a string B.

Output Format
Your function should return 1 if it is possible to re-arrange the characters of the string B so that 
it can be represented as a concatenation of A similar strings. If it is not, return -1.

Example Input
Input 1:
 A = 2
 B = "bbaabb"
Input 2:
 A = 1
 B = "bc"

Example Output
Output 1:
 1
Output 2:
 1

Example Explanation
Explanation 1:
 We can re-order the given string into "abbabb".
Explanation 2:
 String "bc" is already arranged.
------------------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    public int solve(int a, String b) {
        int n = b.length();
        // For string B to be repreented as a concatenation of A similar strings, 
        // every distinct character of B should be present atleast A times
        HashMap<Character, Integer> bmap = new HashMap<Character, Integer>();

        for(int i=0; i < n; i++)
        {
            if(!bmap.containsKey(b.charAt(i)))
                bmap.put(b.charAt(i), 0);
            bmap.put(b.charAt(i), bmap.get(b.charAt(i)) + 1);
        }

        for(Map.Entry<Character, Integer> entry : bmap.entrySet())
            if(entry.getValue() % a != 0)
                return -1;
        return 1;
    }
}

/// n is string B length
/// TC = one string traversal + one hashmap traversal = O(n)
/// SC = one extra hashmap used = O(n)
