Q. Permutations of A in B

Problem Description
You are given two strings, A and B, of size N and M, respectively.
You have to find the count of all permutations of A present in B as a substring. 
You can assume a string will have only lowercase letters.

Problem Constraints
1 <= N < M <= 105

Input Format
Given two arguments, A and B of type String.

Output Format
Return a single integer, i.e., number of permutations of A present in B as a substring.

Example Input
Input 1:
 A = "abc"
 B = "abcbacabc"
Input 2:
 A = "aca"
 B = "acaa"

Example Output
Output 1:
 5
Output 2:
 2

Example Explanation
Explanation 1:
 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:
 Permutations of A that are present in B as substring are:
    1. aca
    2. caa 

----------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    public int solve(String A, String B) {
        // idea is to use a sliding window technique to compare A with a substring of B
        int n = A.length(), m = B.length(); int ans = 0;

        int hash1[] = new int[26];
        int hash2[] = new int[26];

        // count frequency of each char in A 
        for (int i = 0; i < n; i += 1) {
            hash1[A.charAt(i) - 'a'] += 1;
        }
        // count frequency of each char in first window of size n in B
        for (int i = 0; i < n; i += 1) {
            hash2[B.charAt(i) - 'a'] += 1;
        }
        ans += same(hash1, hash2);

        // move current window 1 step ahead
        for (int i = n, j = 0; i < m; i += 1, j += 1) {
            hash2[B.charAt(j) - 'a'] -= 1;
            hash2[B.charAt(i) - 'a'] += 1;
            ans += same(hash1, hash2);
        }
        
        return ans;
    }

    // function to compare Hashes..basically (all) the characters of A, B
    public int same(int[] hash1, int[] hash2) {
        for (int i = 0; i < 26; i += 1) {
            if (hash1[i] != hash2[i])
                return 0; // not a permutation of A
        }
        return 1; // got a permutation of A in G
    }
}

/// N is size of input string A
/// TC = 2 array traversals = O(N)
/// SC = extra space for character frequency = O(26)
