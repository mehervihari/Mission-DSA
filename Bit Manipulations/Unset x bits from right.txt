Q. Unset x bits from right

Problem Description
Given an integer A. Unset B bits from the right of A in binary.
For eg:-
A = 93, B = 4
A in binary = 1011101
A should become = 1010000 = 80. Therefore return 80.

Problem Constraints
1 <= A <= 1018
1 <= B <= 60

Input Format
The first argument is a single integer A.
The second argument is a single integer B.

Output Format
Return the number with B unset bits from the right.

Example Input
Input 1:-
A = 25
B = 3
Input 2:-
A = 37
B = 3

Example Output
Output 1:-
24
Output 2:-
32

Example Explanation
Explanation 1:-
A = 11001 to 11000
Explantio 2:-
A = 100101 to 100000

----------------------------------------------------------------------------------------------------

Solution Code-1: (JAVA)
public class Solution {
    public long solve(long a, int b) 
    {
        // idea is to convert A into binary format and then unset B bits
        int[] ca = new int[64]; int idx = 0;
        while(a > 0)
        {
            ca[idx] = (int)(a % 2);
            a /= 2;
            idx++; 
        }

        // unset B bits
        for(int i=idx-1;i>=0;i--)
        {
            if(i<b)
                ca[i] = 0;
        }
        
        // calculate the answer in decimal form
        long r = 0;
        for(int i=idx-1;i>=0;i--)
        {
            r += ca[i] * Math.pow(2,i);
        }
        return r;
    }
}

/// since we are using 64 bits
/// TC = O(64)
/// SC = O(64)

/*
Another simple approach:
Try using for loops iterate from 0 to B-1 and do the needful.

Initialise a variable ans = A
Iterate from i = 0 to i = B - 1. If ith bit was set in A that is (A & (1<<i)) != 0, ans -= (1<<i), unset it from the answer. 
*/
