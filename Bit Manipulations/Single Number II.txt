Q. Single Number II

Problem Description
Given an array of integers, every element appears thrice except for one, which occurs once.
Find that element that does not appear thrice.
NOTE: Your algorithm should have a linear runtime complexity.
Could you implement it without using extra memory?

Problem Constraints
2 <= A <= 5*106
0 <= A <= INTMAX

Input Format
First and only argument of input contains an integer array A.

Output Format
Return a single integer.

Example Input
Input 1:
 A = [1, 2, 4, 3, 3, 2, 2, 3, 1, 1]
Input 2:
 A = [0, 0, 0, 1]

Example Output
Output 1:
 4
Output 2:
 1

Example Explanation
Explanation 1:
 4 occurs exactly once in Input 1.
 1 occurs exactly once in Input 2.

-----------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int singleNumber(final int[] a) 
    {
        int n = a.length, ans = 0;
        //loop through every bit
        for(int i=0; i<=31; i++)
        {
            int count = 0;
            //count the no. of 1's(setbits) in ith bit position of every number
            for(int j=0; j<n; j++)
            {
                 if(is_set_bit(a[j], i))
                    count++;
            }
            //if the count is divisible by 3 then our answer should have 0 in that bit position else it should have 1
            if(count % 3 != 0)
                ans = set_bit(ans, i);
        }
        return ans;        
    }

    //checks if the kth bit is set
    public boolean is_set_bit(int t, int k)
    {
        return (1 & (t >> k)) == 1;
    }

    //sets the bit
    public int set_bit(int t, int k)
    {
        return t | (1 << k);
    }
}

/// N is input array size
/// TC = t1 * t2 = O(32) * O(N) ~= O(N)
// t1 = outer loop time to iterate through all bits = O(32)
// t2 = inner loop time to iterate through given integers = O(N)
/// SC = constant extra space for answer = O(1)
