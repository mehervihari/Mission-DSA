Q. Running Median

Problem Description
Given an array of integers, A denoting a stream of integers. New arrays of integer B and C are formed.
Each time an integer is encountered in a stream, append it at the end of B and append the median of array B at the C.
Find and return the array C.
NOTE:
If the number of elements is N in B and N is odd, then consider the median as B[N/2] ( B must be in sorted order).
If the number of elements is N in B and N is even, then consider the median as B[N/2-1]. ( B must be in sorted order).

Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109

Input Format
The only argument given is the integer array A.

Output Format
Return an integer array C, C[i] denotes the median of the first i elements.

Example Input
Input 1:
 A = [1, 2, 5, 4, 3]
Input 2:
 A = [5, 17, 100, 11]

Example Output
Output 1:
 [1, 1, 2, 2, 3]
Output 2:
 [5, 5, 17, 11]

Example Explanation
Explanation 1:
 stream          median
 [1]             1
 [1, 2]          1
 [1, 2, 5]       2
 [1, 2, 5, 4]    2
 [1, 2, 5, 4, 3] 3
Explanation 2:
 stream          median
 [5]              5
 [5, 17]          5
 [5, 17, 100]     17
 [5, 17, 100, 11] 11 

------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public int[] solve(int[] A) {
        /*
        1. Maintain a max-heap for small (dabba) elements and a min-heap for large (dabba) elements
        2. Whenever a new element comes,1st insert it to the small dabba
        3. Balance the number of elements in both the dabbas by either moving max_small to large dabba or min_large to small dabba
        4. Ensure that no. of elements in small dabba is == no. of elements in large dabba or (+ 1) 
        5. For this question, always => median is the max_small
        */

        PriorityQueue<Integer> small = new PriorityQueue<>(Collections.reverseOrder()); // max-heap
        PriorityQueue<Integer> large = new PriorityQueue<>(); // min-heap

        int n = A.length;
        int[] C = new int[n];
        for(int i=0; i<n; i++)
        {
            small.add(A[i]);
            large.add(small.poll());

            if(small.size() < large.size()){
                small.add(large.poll());
            }

            C[i] = small.peek();
        }
        return C;
    }

/// N is the input array size
/// TC = for every element we do 1-3 insert, remove operations ans since each operation would take log N time
///    => for N elements it is = O(N * log N)
/// SC = extra space for min, max heaps = O(N)
