Q. Max Sum Contiguous Subarray

Problem Description
Find the contiguous non-empty subarray within an array, A of length N, with the largest sum.

Problem Constraints
1 <= N <= 1e6
-1000 <= A[i] <= 1000

Input Format
The first and the only argument contains an integer array, A.

Output Format
Return an integer representing the maximum possible sum of the contiguous subarray.

Example Input
Input 1:
 A = [1, 2, 3, 4, -10] 
Input 2:
 A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 

Example Output
Output 1:
 10 
Output 2:
 6

Example Explanation
Explanation 1:
 The subarray [1, 2, 3, 4] has the maximum possible sum of 10. 
Explanation 2:
 The subarray [4,-1,2,1] has the maximum possible sum of 6. 
---------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int maxSubArray(final int[] a) 
    {
        int n = a.length;
        
        //Kadane's algorithm
        // if the array contains only positive elements...length of the array will be the answer but
        // the array contains negative elements too...so we need to take care of them
        // a negative element could be part of our required subarray until it doesn't make that subarray's sum < 0

        // sum to maintain the sum calculated so far
        int sum = 0, maxSum = Integer.MIN_VALUE;
        for(int i=0; i<n; i++)
        {
            sum += a[i];
            maxSum = Math.max(maxSum, sum);

            // reset the sum when it becomes negative because negative sum minimmises our required (max) sum
            sum = Math.max(sum, 0);
        }

        /* jus another way is to maintian the maximum sum possible with a subarray ending with a[i]
        for(int i=1; i<n; i++)
        {
            maxEnding += a[i];
            ans = Math.max(maxEnding, ans);
            maxEnding = Math.max(0, maxEnding);
        }*/

        return maxSum;
    }
}

/// N is the input array size
/// TC = one array traversal = O(N)
/// TC = constant extra space = O(1)