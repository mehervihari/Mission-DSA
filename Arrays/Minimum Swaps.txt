Q. Minimum Swaps

Problem Description
Given an array of integers A and an integer B, 
find and return the minimum number of swaps required to bring all the numbers less than or equal to B together.
Note: It is possible to swap any two elements, not necessarily consecutive.

Problem Constraints
1 <= length of the array <= 100000
-109 <= A[i], B <= 109

Input Format
The first argument given is the integer array A.
The second argument given is the integer B.

Output Format
Return the minimum number of swaps.

Example Input
Input 1:
 A = [1, 12, 10, 3, 14, 10, 5]
 B = 8
Input 2:
 A = [5, 17, 100, 11]
 B = 20

Example Output
Output 1:
 2
Output 2:
 1

Example Explanation
Explanation 1:
 A = [1, 12, 10, 3, 14, 10, 5]
 After swapping  12 and 3, A => [1, 3, 10, 12, 14, 10, 5].
 After swapping  the first occurence of 10 and 5, A => [1, 3, 5, 12, 14, 10, 10].
 Now, all elements less than or equal to 8 are together.
Explanation 2:
 A = [5, 17, 100, 11]
 After swapping 100 and 11, A => [5, 17, 11, 100].
 Now, all elements less than or equal to 20 are together.

--------------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    public int solve(int[] a, int k) 
    {
        // idea is to first find the no. of elements that are <= k
        // then using sliding window technique, find the minimum no. of swaps
        // (window size is the the no. of elements that are <= k)

        int kle = 0;
        int n = a.length;

        // process the 1st window
        for(int i=0; i<n; i++)
        {
            if(a[i] <= k) kle++;
        }
        
        // find the elements that are > k in each window, which 
        // means the no. of elements that are to be swapped which
        // inturn means the no. of swaps to be done in that window to make all elements <= k

        int minswaps = Integer.MAX_VALUE; int currswaps = 0;
        for(int i=0; i < kle; i++)
        {
            if(a[i] > k) currswaps++;
        }
        
        minswaps = Math.min(minswaps, currswaps);
        for(int i=1; i<=n-kle; i++)
        {
            if(a[i-1] > k) currswaps--;
            if(a[i+kle-1] > k) currswaps++;

            // most minimum swaps made out of all windows is the answer
            minswaps = Math.min(minswaps, currswaps);
        }
        return minswaps;
    }
}

/// N is input array size
/// TC = 2 array traversals = O(N)
/// SC = constant extra space = O(1)
