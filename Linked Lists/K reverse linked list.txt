Q. K reverse linked list

Problem Description
Given a singly linked list A and an integer B, reverse the nodes of the list B at a time and return the modified linked list.

Problem Constraints
1 <= |A| <= 103
B always divides A

Input Format
The first argument of input contains a pointer to the head of the linked list.
The second arugment of input contains the integer, B.

Output Format
Return a pointer to the head of the modified linked list.

Example Input
Input 1:
 A = [1, 2, 3, 4, 5, 6]
 B = 2
Input 2:
 A = [1, 2, 3, 4, 5, 6]
 B = 3

Example Output
Output 1:
 [2, 1, 4, 3, 6, 5]
Output 2:
 [3, 2, 1, 6, 5, 4]

Example Explanation
Explanation 1:
 For the first example, the list can be reversed in groups of 2.
    [[1, 2], [3, 4], [5, 6]]
 After reversing the K-linked list
    [[2, 1], [4, 3], [6, 5]]

Explanation 2:
 For the second example, the list can be reversed in groups of 3.
    [[1, 2, 3], [4, 5, 6]]
 After reversing the K-linked list
    [[3, 2, 1], [6, 5, 4]]
-------------------------------------------------------------------------------------------------------------------------------------
Solution code:
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode a, int b) {
        // 'from' is the start position node // 'to' is the end position node
        // 'prev' is the node previous to start position // 'later' is the next node of end positon
        ListNode prev = null, from = a, to = null, later = null;
        // NOTE: 'from' and 'to' nodes change for every set of 'b' nodes that are to be reversed
        while(from != null)
        {
            to = from;
            // find the 'to' node
            int count = 1;
            while(count < b)
            {
                to = to.next;
                count++;
            }

            // find the 'later' node
            later = to.next;
            to.next = null;

            // reverse the LL from 'from' to 'to'
            reverseLL(from);

            // update 'prev' node
            if(prev != null) {
                prev.next = to;
                prev = from;
            }
            else{
                prev = a;
                a = to;
            }

            // update 'from' node
            from.next = later;
            from = later;
        }
        return a;
    }

    // function to reverse the given LL
    public void reverseLL(ListNode a) 
    {
        // set current node, previous node inorder to reverse the LL
        ListNode prev = null, curr = a, temp = a;
        while(temp.next != null)
        {
            temp = temp.next;
            // current node should point to the previous node
            curr.next = prev;
            // update current node, previous node
            prev = curr;
            curr = temp;
        }
        curr.next = prev;
    }
}

/// n is size of the LL
/// TC = t1 * (t2 + t3) = O(n * 2b) = O(bn)
// t1 = time for main while loop = O(n)
// t2 = time to find 'to' node = O(b)
// t3 = time to reverse LL = O(b)
/// SC = looks like O(1) since no extra space used