Q. Fibonacci Number

Problem Description
Given a positive integer A, write a program to find the Ath Fibonacci number.
In a Fibonacci series, each term is the sum of the previous two terms and the first two terms of the series are 0 and 1. i.e. 
f(0) = 0 and f(1) = 1. Hence, f(2) = 1, f(3) = 2, f(4) = 3 and so on.
NOTE: 0th term is 0. 1th term is 1 and so on.

Problem Constraints
0 <= A <= 44

Input Format
First and only argument is an integer A.

Output Format
Return an integer denoting the Ath Fibonacci number.

Example Input
Input 1:
 A = 4
Input 2:
 A = 6

Example Output
Output 1:
 3
Output 2:
 8

Example Explanation
Explanation 1:
 Terms of Fibonacci series are: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on.
 0th term is 0 So, 4th term of Fibonacci series is 3. 
Explanation 2:
 6th term of Fibonacci series is 8.

--------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)

using System;
using System.IO;

class MAIN  {
    public static void Main(string[] args) {
        // YOUR CODE GOES HERE
        // Please take input and print output to standard input/output (stdin/stdout)
        // DO NOT USE ARGUMENTS FOR INPUT
        // E.g. 'StreamReader' for input & 'StreamWriter' for output
        
        int n = Int32.Parse(Console.ReadLine());
        int[] cache = new int[n+1];
        
        //Console.WriteLine(fib(n, cache));
        Console.WriteLine(fib(n));
    }

    /// Approach-1
    /// pure recursion approach
    /*static int fib(int n)
    {
        if(n <= 1) return n;
        
        return fib(n-1) + fib(n-2);
    }*/
    /// TC = no. of all calls * time/call = O(2^N)
    /// SC = recursion space = depth of recursion tree = O(N)

    /// Approach-2 (Top-Down DP)
    /// add cache to recursion
    /// Dynamic Programming = recursion + cache => reduces no. of recursive calls
    /*static int fib(int n, int[] cache)
    {
        // base case
        if(n <= 1)
        {
            return n;
        }

        // if not computed earlier, then only do the recursion
        if(cache[n] == 0)
            cache[n] = fib(n-1, cache) + fib(n-2, cache);

        return cache[n];
    }*/
    /// TC = no. of distinct calls * time/call = O(N)
    /// SC = recursion space + cache space = O(N + N)

    /// Approach-3 (Bottom-up)
    /// Bottom-up approach => no recursion, only cache
    /*static int fib(int n, int[] cache)
    {
        cache[0] = 0; cache[1] = 1;

        for(int i=2; i<=n; i++)
        {
            cache[i] = cache[i-1] + cache[i-2];
        }
        return cache[n];
    }*/
    /// TC = time for the loop = O(N)
    /// SC = only cache space = O(N)

    /// Approach-4 (Bottom-up space optimization)
    /// Bottom-up approach with space optimization => identify the dependency on cache
    /// for any calulation, we are only depending on last 2 values
    static int fib(int n)
    {
        if(n <= 1) return n;

        int prev = 0, curr = 1;
        for(int i = 2; i <= n; i++)
        {
            int value = prev + curr;
            prev = curr;
            curr = value;
        }
        return curr;
    }
    /// TC = time for the loop = O(N)
    /// SC = constant extra space = O(1)
}
