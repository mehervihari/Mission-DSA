Q. Sliding Window Maximum

Problem Description
Given an array of integers A. There is a sliding window of size B, moving from the very left of the array to the very right. 
You can only see the B numbers in the window. Each time the sliding window moves rightwards by one position. 
You have to find the maximum for each window.
Return an array C, where C[i] is the maximum value in the array from A[i] to A[i+B-1].
Refer to the given example for clarity.
NOTE: If B > length of the array, return 1 element with the max of the array.

Problem Constraints
1 <= |A|, B <= 106

Input Format
The first argument given is the integer array A.
The second argument given is the integer B.

Output Format
Return an array C, where C[i] is the maximum value of from A[i] to A[i+B-1].

Example Input
Input 1:
 A = [1, 3, -1, -3, 5, 3, 6, 7]
 B = 3
Input 2:
 A = [1, 2, 3, 4, 2, 7, 1, 3, 6]
 B = 6

Example Output
Output 1:
 [3, 3, 5, 5, 6, 7]
Output 2:
 [7, 7, 7, 7]

Example Explanation
Explanation 1:

 Window position     | Max
 --------------------|-------
 [1 3 -1] -3 5 3 6 7 | 3
 1 [3 -1 -3] 5 3 6 7 | 3
 1 3 [-1 -3 5] 3 6 7 | 5
 1 3 -1 [-3 5 3] 6 7 | 5
 1 3 -1 -3 [5 3 6] 7 | 6
 1 3 -1 -3 5 [3 6 7] | 7
Explanation 2:

 Window position     | Max
 --------------------|-------
 [1 2 3 4 2 7] 1 3 6 | 7
 1 [2 3 4 2 7 1] 3 6 | 7
 1 2 [3 4 2 7 1 3] 6 | 7
 1 2 3 [4 2 7 1 3 6] | 7

-----------------------------------------------------------------------------------------------------------------------------

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] slidingMaximum(final int[] a, int b) 
    {
        int n = a.length;
        int[] ans = new int[n-b+1];
        // idea is to use a DS(Data Structure) which stores only the elements that could be potentially maximum for a window
        // every element can potentially be a maximum one for some or other window, so it can be added to the DS (from last) but
        // if you encounter an element that is greater than those that are already present in the DS, they can be removed (from last)
        // also the elements that got out of the window when slided can be removed (from first)
        // this way, for every slide, the element present at front (of DS) is the maximum element for that window

        // NOTE: instead of storing the elements in the DS, store the indexes to avoid mismatches

        // a DS that supports addition and removal from front, rear is Deque, so use Deque
        Deque<Integer> dq = new LinkedList<>();

        // process the 1st window of size 'B'
        for(int i=0; i<b; i++)
        {
            if(dq.size() != 0)
            {
                // for every element, the previous elements lesser then it are useless and are removed
                while(dq.size() != 0 && a[dq.peekLast()] <= a[i])
                {
                    // remove from last
                    dq.removeLast();
                }
            }
            // add new element at the last
            dq.addLast(i);
        }

        // after a window is processed, element present at the front is the maximum one for that window
        ans[0] = a[dq.getFirst()];

        // process rest of the windows
        for(int i=b; i<n; i++)
        {
            // remove the element that just got out of the window, remove it from front
            if(dq.size() != 0 && dq.getFirst() == i-b) dq.removeFirst();

            // for every element, the previous elements lesser then it are useless and are removed
            while(dq.size() != 0 && a[dq.peekLast()] <= a[i])
            {
                dq.removeLast();
            }

            // add new element at the last
            dq.addLast(i);

            // after a window is processed, element present at the front is the maximum one for that window
            ans[i-b+1] = a[dq.getFirst()];
        }
        return ans;
    }
}

/// N is input array size
/// TC = 1 array traversal ans also every element is added and removed at most once = O(N)
/// SC = if arr to be returned is not considered, at any time atmost 'B' elements are stored in the Deque = O(B)
