Q. Maximum Frequency stack

You are given a matrix A of size N x 2 which represents different operations.
Assume initially you have a stack-like data structure you have to perform operations on it.

Operations are of two types:
1 x: push an integer x onto the stack and return -1.
2 0: remove and return the most frequent element in the stack.
If there is a tie for the most frequent element, the element closest to the top of the stack is removed and returned.
A[i][0] describes the type of operation to be performed. A[i][1] describe the element x or 0 corresponding to the operation performed.

Problem Constraints
1 <= N <= 100000
1 <= A[i][0] <= 2
0 <= A[i][1] <= 109

Input Format
The only argument given is the integer array A.

Output Format
Return the array of integers denoting the answer to each operation.

Example Input
Input 1:
A = [
            [1, 5]
            [1, 7]
            [1, 5]
            [1, 7]
            [1, 4]
            [1, 5]
            [2, 0]
            [2, 0]
            [2, 0]
            [2, 0]  ]
Input 2:
 A =  [   
        [1, 5]
        [2, 0]
        [1, 4]   ]


Example Output
Output 1:
 [-1, -1, -1, -1, -1, -1, 5, 7, 5, 4]
Output 2:
 [-1, 5, -1]

Example Explanation
Explanation 1:
 Just simulate given operations.
Explanation 2:
 Just simulate given operations.

-------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
/*
Approach:
Create two HashMaps & variable to store max frequency count.
First one will contains Integer as key and Stack<Integer> as value
Second HashMap will contain the frequency of each element;
In the fist HashMap, the will keep all the elements in the stack with same frequency
Let say you insert 15, 17 , 18 , 15.. the key 1 will have stack will contains 15, 17 &  18
Key 2 will have 15 again, as it is the second occurrence of 15 & so on.
So, whenever a element is added its frequency has to be updated in the second HashMap.
The element has to be added in the first HashMap's stack according to its frequency.
While POPING we have to do the reverse.
*/

public class Solution {
    int maxCount = 0;
    public int[] solve(int[][] A) {
        int n = A.length;
        HashMap<Integer, Stack<Integer>> stacHm = new HashMap<>();
        HashMap<Integer, Integer> freq = new HashMap<>();
        List<Integer> ans = new ArrayList<>();

        for(int i=0; i<n; i++){
            int opr = A[i][0];
            int val = A[i][1];

            if(opr == 1)
            {
                insert(stacHm, freq, ans, val);
            }
            else{
                remove(stacHm, freq, ans);
            }
        }
        return ans.stream().mapToInt(i->i).toArray();
    }

    public void insert(HashMap<Integer, Stack<Integer>> stacHm, HashMap<Integer, Integer> freq, List<Integer> ans, int val)
    {
        if(!freq.containsKey(val))
        {
            freq.put(val, 1);
        }
        else{
            freq.put(val, freq.get(val) + 1);
        }

        int f = freq.get(val);
        if(stacHm.containsKey(f))
        {
            Stack<Integer> st = stacHm.get(f);
            st.push(val);
            stacHm.put(f, st);
        }
        else{
            Stack<Integer> st = new Stack<>();
            st.push(val);
            stacHm.put(f, st);
            maxCount++;
        }
        ans.add(-1);
    }

    public void remove(HashMap<Integer, Stack<Integer>> stacHm, HashMap<Integer, Integer> freq, List<Integer> ans)
    {
        Stack<Integer> st = stacHm.get(maxCount);
        int val = st.pop();
        ans.add(val);

        if(st.isEmpty())
        {
            stacHm.remove(maxCount);
            maxCount--;
        }
        else{
            stacHm.put(maxCount, st);
        }

        int count = freq.get(val);
        count--;

        if(count == 0)
        {
            freq.remove(val);
        }
        else{
            freq.put(val, count);
        }
    }
}

/// N is the size of input Array
/// TC = N iterations each of O(1) because any insert or remove operation takes O(1) = O(N)
/// SC = extra space for HashMaps and answer list = O(N)


