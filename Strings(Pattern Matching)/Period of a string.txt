Q. Period of a string

Problem Description
You are given a string A of length N consisting of lowercase alphabets. Find the period of the string.
Period of the string is the minimum value of k (k >= 1), that satisfies A[i] = A[i % k] for all valid i.

Problem Constraints
1 <= N <= 106

Input Format
First and only argument is a string A of length N.

Output Format
Return an integer, denoting the period of the string.

Example Input
Input 1:
 A = "abababab"
Input 2:
 A = "aaaa"

Example Output
Output 1:
 2
Output 2:
 1

Example Explanation
Explanation 1:
 Period of the string will be 2: 
 Since, for all i, A[i] = A[i%2]. 
Explanation 2:
 Period of the string will be 1.

----------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    public int solve(String a) {
        
        /* brute force solution is to check for every 'k' value that satisfies the given condition of a[i] = a[i%k] and
           keep track of minimum 'k' value */
        // int n = a.length(); int minK = n+1;
        // for(int k=1; k<=n; k++)
        // {
        //     boolean isValidK = true;
        //     for(int i=0; i<n; i++)
        //     {
        //         if(a.charAt(i) != a.charAt(i % k))
        //         {
        //             isValidK = false; break;
        //         }
        //     }
        //     if(isValidK){
        //         minK = Math.min(minK, k);
        //     }
        // }
        // return minK;

        /* optimised solution using LPS technique 
            shortcut formula */
        int n = a.length(); int minK = 0;
        int[] lps = findLPS(a);
        
        return n - lps[n-1];
    }

    public int[] findLPS(String a)
    {
        int n = a.length();
        int[] lps = new int[a.length()];
        lps[0] = 0; int i = 1;
        while(i < n)
        {
            int x = lps[i-1];
            while(a.charAt(i) != a.charAt(x))
            {
                if(x <= 0) { x = -1; break; }
                x = lps[x-1];
            }
            lps[i] = x + 1;
            i++;            
        }
        return lps;
    }
}

/// N is input string size
/// TC = time to calculate lps array = O(N)
/// SC = extra space for lps array = O(N)
