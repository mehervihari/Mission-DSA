Q. Minimum characters to be added at front to make string palindrome

Problem Description:
Given string str of length N. The task is to find the minimum characters to be added at the front to make string palindrome.
Note: A palindrome is a word which reads the same backward as forward. Example: "madam".

Example 1:
Input:
S = "abc"
Output: 2
Explanation: 
Add 'b' and 'c' at front of above string to make it
palindrome : "cbabc"

Example 2:
Input:
S = "aacecaaa"
Output: 1
Explanation: Add 'a' at front of above string
to make it palindrome : "aaacecaaa"

Your Task: 
You don't need to read input or print anything. 
Your task is to complete the function minChar() which takes a string S and returns an integer as output.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= S.length <= 106

----------------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
class Solution {
    public static int minChar(String str) {
       //Write your code here
       int n = str.length();
       StringBuffer sb = new StringBuffer(str);
       String rev = "" + sb.reverse();
       String s = str + "$" + rev;
       int[] lps = lps(s);

       int m = s.length();
       
       return n - lps[m-1];
    }
    
    public static int[] lps(String s)
    {
        int n =s.length();
        int[] lps = new int[n];
        lps[0] = 0;
        for(int i=1; i<n; i++)
        {
            int x = lps[i-1];
            while(s.charAt(i) != s.charAt(x))
            {
                if(x == 0)
                {
                    x = -1; break;
                }
                x = lps[x-1];
            }
            lps[i] = x+1;
        }
        return lps;
    }
}

/// N is input string length
/// TC = time to find lps array of string of length 2*N = O(N)
/// SC = space to store lps array = O(N) 
