Q. Maximum Units on a Truck - ** WiseTechGlobal **

Description:
You are assigned to put some amount of boxes onto one truck. 
You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:
numberOfBoxesi is the number of boxes of type i.
numberOfUnitsPerBoxi is the number of units in each box of the type i.
You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. 
You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.
Return the maximum total number of units that can be put on the truck.

Example 1:
Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.

Example 2:
Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91

Constraints:
1 <= boxTypes.length <= 1000
1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000
1 <= truckSize <= 106

------------------------------------------------------------------------------------------------------------------------------------

Intuition
Idea is to find the boxtype having maximum number of units and add that to the truck. And then find for next maximum.

Approach
This is a Greedy approach.
Sort the boxtypes in such a way that boxtype with maximum no. of trucks appears first in the array, i.e descending order.

Complexity
Time complexity:
n is the size of input array
TC = t1 + t2 = O(n lg n) + O(n) = O(n lg n)
t1 = time to sort = O(n lg n)
t2 = one array traversal = O(n)

Space complexity:
SC = O(1)
Sorting is done inplace, only constant extra space used.

Solution Code: (C#)
public class Solution {
    public int MaximumUnits(int[][] boxTypes, int truckSize) {
        Array.Sort(boxTypes, Comparator);
        int MaximumUnits = 0;
        for(int i=0; i<boxTypes.Length; i++)
        {
            if(truckSize >= boxTypes[i][0])
            {
                MaximumUnits += boxTypes[i][0] * boxTypes[i][1];
                truckSize -= boxTypes[i][0];
            }
            else{
                MaximumUnits += Math.Min(boxTypes[i][0], truckSize) * boxTypes[i][1];
                return MaximumUnits;
            }
        }
        return MaximumUnits;
    }

    public int Comparator(int[] x, int[] y)
    {
        if(x[1] < y[1]) return 1;
        else if(x[1] == y[1]) return 0;
        else return -1;
    }
}
