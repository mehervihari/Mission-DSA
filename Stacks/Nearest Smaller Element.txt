Q. Nearest Smaller Element

Problem Description
Given an array A, find the nearest smaller element G[i] for every element A[i] in the array such that the element has an index smaller than i.
More formally,
G[i] for an element A[i] = an element A[j] such that
j is maximum possible AND
j < i AND
A[j] < A[i]
Elements for which no smaller element exist, consider the next smaller element as -1.

Problem Constraints
1 <= |A| <= 100000
-109 <= A[i] <= 109

Input Format
The only argument given is integer array A.

Output Format
Return the integar array G such that G[i] contains the nearest smaller number than A[i]. 
If no such element occurs G[i] should be -1.

Example Input
Input 1:
 A = [4, 5, 2, 10, 8]
Input 2:
 A = [3, 2, 1]

Example Output
Output 1:
 [-1, 4, -1, 2, 2]
Output 2:
 [-1, -1, -1]

Example Explanation
Explanation 1:
index 1: No element less than 4 in left of 4, G[1] = -1
index 2: A[1] is only element less than A[2], G[2] = A[1]
index 3: No element less than 2 in left of 2, G[3] = -1
index 4: A[3] is nearest element which is less than A[4], G[4] = A[3]
index 4: A[3] is nearest element which is less than A[5], G[5] = A[3]
Explanation 2:
index 1: No element less than 3 in left of 3, G[1] = -1
index 2: No element less than 2 in left of 2, G[2] = -1
index 3: No element less than 1 in left of 1, G[3] = -1

--------------------------------------------------------------------------------------------------------------------

Solution Code: (JAVA)
public class Solution {
    public int[] prevSmaller(int[] a) 
    {
        // idea is to maintain a stack in which we store only the elements that are potentially smaller for next elements of the array
        // every element is potentially smaller to its next elements beacuse we have not seen the next elements
        // so traverse the array and add its elements to the stack one-by-one but before adding
        // remove all the elements that are >= current element because they can't be potentially smaller anymore and
        // top most element of the stack after removing unrequired elements is the nearest smaller one for the current element

        int n = a.length;
        int[] ans = new int[n];
        Stack<Integer> stac = new Stack<>();

        for(int i=0; i<n; i++)
        {
            while(!stac.empty() && stac.peek() >= a[i]) stac.pop();

            // if no element is left after removing all the unpotential elements, consider -1
            if(stac.empty()){
                ans[i] = -1;
            }
            else{
                ans[i] = stac.peek();
            }

            stac.push(a[i]);
        }
        return ans;
    }
}

/// N is input array size
/// TC = 1 array traversal = O(N)
/// SC = if answer array not considered but extra space for stack = O(N)
