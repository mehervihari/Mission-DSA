Q. KthPrice

Given the price list at which tickets for a flight were purchased, figure out the kth smallest price for the flight. 
kth smallest price is the minimum possible n such that there are at least k price elements in the price list with value <= n. 
In other words, if the price list was sorted, then A[k-1] ( k is 1 based, while the array is 0 based ).
NOTE You are not allowed to modify the price list ( The price list is read only ). Try to do it using constant extra space.

Example:
A : [2 1 4 3 2]
k : 3

Answer : 2

Constraints :
1 <= number of elements in the price list <= 1000000
1 <= k <= number of elements in the price list
-------------------------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int solve(final int[] a, int b) 
    {
        // idea is to binary search on the possible price values
        // minimum possible price is the minimum value of the array and similarly maximum price
        int n = a.length; int aMin = a[0], aMax = a[0];
        for(int i=0; i<n; i++)
        {
            aMin = Math.min(aMin, a[i]);
            aMax = Math.max(aMax, a[i]);
        }

        int low = aMin, high = aMax;
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            // check if some price is valid and
            // if that price is not valid, we have to check for higher price values for their validity or
            // else we can check for lower price values for their validity...hence the partition proposition
            if(!isValidPrice(mid, a, b))
                low = mid + 1;
            else high = mid - 1;
        }
        return (low - 1) + 1;
    }
    
    public boolean isValidPrice(int p, int[] a, int b)
    {
        // a price 'p' is said to be valid, if there are atleast B values in the array that are <= 'p'
        int n = a.length, count = 0;
        for(int i=0; i<n; i++)
        {
            if(a[i] <= p)
                count++;
        }
        if(count >= b) return true;
        return false;
    }
}

/// TC = log(binary search space) = log(maximum value of the array) = log(Amax)
/// SC = constant extra space = O(1)