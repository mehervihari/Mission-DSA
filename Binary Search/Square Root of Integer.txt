Q. Square Root of Integer

Problem Description
Given an integer A.
Compute and return the square root of A.
If A is not a perfect square, return floor(sqrt(A)).
DO NOT USE SQRT FUNCTION FROM THE STANDARD LIBRARY.
NOTE: Do not use the sqrt function from the standard library. Users are expected to solve this in O(log(A)) time.

Problem Constraints
0 <= A <= 1010

Input Format
The first and only argument given is the integer A.

Output Format
Return floor(sqrt(A))

Example Input
Input 1:
 11
Input 2:
 9

Example Output
Output 1:
 3
Output 2:
 3

Example Explanation
Explanation:
 When A = 11 , square root of A = 3.316. It is not a perfect square so we return the floor which is 3.
 When A = 9 which is a perfect square of 3, so we return 3.

------------------------------------------------------------------------------------------------------------------------

public class Solution {
    public int sqrt(int A) {
        // idea is to define a search space and do binary search over it
        if(A <= 1) return A;
        return bin_search(A);
    }

    public int bin_search(int a)
    {
        // search space for Square root of A is 0 to A
        long low = 0, high  = a;
        
        while(low <= high)
        {
            long m = low + (high - low)/2;
            //take care of overflowwwww...........................
            if(m <= a/m) low = m + 1;
            else high = m - 1;
        }
        return (int)low - 1;
    }
}

/// TC = looks like = O(log A)
/// SC = no extra space =O(1)
