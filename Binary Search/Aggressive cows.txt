Q. Aggressive cows
Problem Description
Farmer John has built a new long barn with N stalls. Given an array of integers A of size N where each element of the array represents the location of the stall and an integer B which represents the number of cows.
His cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, John wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?

Problem Constraints
2 <= N <= 100000
0 <= A[i] <= 109
2 <= B <= N

Input Format
The first argument given is the integer array A.
The second argument given is the integer B.

Output Format
Return the largest minimum distance possible among the cows.

Example Input
Input 1:
A = [1, 2, 3, 4, 5]
B = 3
Input 2:
A = [1, 2]
B = 2

Example Output
Output 1:
 2
Output 2:
 1

Example Explanation
Explanation 1:
John can assign the stalls at location 1, 3 and 5 to the 3 cows respectively. So the minimum distance will be 2.
Explanation 2:
The minimum distance will be 1.

----------------------------------------------------------------------------------------------------------------------------------------------

public class Solution {
    
    public int solve(int[] a, int c) 
    {
        int n = a.length;
        // sort the array for making it easier to find the answer
        Arrays.sort(a);

        /// binary_search on the answer(min-distance)
        /// search space => low(min possible value of distance) = 1,
                    // put first cow in first barn, C-l cows remain and distance of max - min 
                    // => high(max possible value of distance) => distance b/w farthest barns = maxA - minA / c-1
        /// partition proposition - guess - check if guess is valid or not - discard 1/2 of the search space 
        int low = 1, high = ((a[n-1] - a[0])/(c-1));
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            if(is_valid_distance(a, c, mid))
            // go to search in next half of the current search space
                low = mid + 1;
            // go to search in before half of the current search space
            else high = mid - 1;
        }
        return low - 1;
    }

    public boolean is_valid_distance(int[] a, int c, int exp_dist)
    {
        int n = a.length;
        // place the first cow in the first barn
        int prev_barn = a[0]; int i = 1; c--;
        while(c > 0)
        {
            // find a barn for this cow which is atleast exp_dist apart
            while(i < n && (a[i] - prev_barn < exp_dist))
            {
                i++;
            }
            // we couldn't find a barn
            if(i == n) return false;

            // put the cow in the barn
            prev_barn = a[i]; i++; c--;
        }
        // if all cows are placed - its a valid distance
        return true;
    }    
}

/// TC = in general is O(lg(search space)) => O(t1 * lg((max - min)/c-1)) + t2 =  O(n * lg((max - min)/c-1)) + O(n lg(n))
// search space = (max - min)/c-1 and 
// t1 = time for is_valid_distance = O(n)
// t2 = time for array sort = O(n lg(n))
/// SC = no extra space = o(1)