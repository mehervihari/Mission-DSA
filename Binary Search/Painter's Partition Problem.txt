Q. Painter's Partition Problem ***

Problem Description
Given 2 integers A and B and an array of integers C of size N. Element C[i] represents the length of ith board.
You have to paint all N boards [C0, C1, C2, C3 â€¦ CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of the board.
Calculate and return the minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of the board.
NOTE:
1. 2 painters cannot share a board to paint. That is to say, a board cannot be painted partially by one painter, and partially by another.
2. A painter will only paint contiguous boards. This means a configuration where painter 1 paints boards 1 and 3 but not 2 is invalid.
Return the ans % 10000003.

Problem Constraints
1 <= A <= 1000
1 <= B <= 106
1 <= N <= 105
1 <= C[i] <= 106

Input Format
The first argument given is the integer A.
The second argument given is the integer B.
The third argument given is the integer array C.

Output Format
Return minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of board % 10000003.

Example Input
Input 1:
 A = 2
 B = 5
 C = [1, 10]
Input 2:
 A = 10
 B = 1
 C = [1, 8, 11, 3]

Example Output
Output 1:
 50
Output 2:
 11

Example Explanation
Explanation 1:
 Possibility 1:- One painter paints both blocks, time taken = 55 units.
 Possibility 2:- Painter 1 paints block 1, painter 2 paints block 2, time take = max(5, 50) = 50
 There are no other distinct ways to paint boards.
 ans = 50 % 10000003

Explanation 2:
 Each block is painted by a painter so, Painter 1 paints block 1, painter 2 paints block 2, painter 3 paints block 3 
 and painter 4 paints block 4, time taken = max(1, 8, 11, 3) = 11
 ans = 11 % 10000003
----------------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    public int paint(int a, int b, int[] c) {
        // idea is to binary search on possible times taken
        // minimum possible time taken is = time for the longest board = length of longest board * time for 1 unit (B)
        // maximum possible time taken is = time for all the boards = sum of all board lengths * time for 1 unit (B)
        int n = c.length; int maxC = c[0]; long sum = 0; int mod = 10000003;
        for(int i=0; i<n; i++)
        {
            // find the longest board
            maxC = Math.max(maxC, c[i]);
            sum += (long)c[i];
        }

        // binary search on possible times taken
        long low = (long)maxC * b, high = sum * b;
        while(low <= high)
        {
            long mid = low + (high - low)/2;
            // if some time 't' is valid, we want to check if any time < 't' is also valid
            if(is_valid_time(a, b, c, mid))
                high = mid - 1L;
            // if some time 't' is invalid, any time < 't' is also invalid and we want to check for greater time values
            else low = mid + 1L;
        }
        return (int)(low % mod);
    }

    // time 't' is said to be valid if all boards are painted within that time using all available painters
    public boolean is_valid_time(int a, int b, int[] c, long exp_time)
    {
        int n = c.length;
        int i = 0;
        // as long as we have painters
        while(a > 0)
        {
            // amount of time the current painter has used up so far
            long time = 0L;
            // as long as the current painter has enough time, he can paint the next board
            while(i < n && ((time + ((long)c[i] * (long)b)) <= exp_time))
            {
                time += ((long)c[i] * (long)b);
                i++;
            }

            // if all the boards are painted
            if(i == n) return true;
            // this painter is exhausted...move to next painter
            a--;
        }
        // we couldn't paint all boards
        return false;
    }    
}

/// search space = sum A * T
/// TC = order of log(size of search space) = O(log(sum A * T))
/// SC = no extra space = O(1)