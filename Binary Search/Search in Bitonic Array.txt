Q. Search in Bitonic Array!

Problem Description
Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:
A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.

Problem Constraints
3 <= N <= 105
1 <= A[i], B <= 108
Given array always contain a bitonic point.
Array A always contain distinct elements.

Input Format
First argument is an integer array A denoting the bitonic sequence.
Second argument is an integer B.

Output Format
Return a single integer denoting the position (0 index based) of the element B in the array A if B doesn't exist in A return -1.

Example Input
Input 1:
 A = [3, 9, 10, 20, 17, 5, 1]
 B = 20
Input 2:
 A = [5, 6, 7, 8, 9, 10, 3, 2, 1]
 B = 30

Example Output
Output 1:
 3
Output 2:
 -1

Example Explanation
Explanation 1:
 B = 20 present in A at index 3
Explanation 2:
 B = 30 is not present in A
----------------------------------------------------------------------------------------------------------------------------------------
Solution code:
public class Solution {
    public int solve(int[] a, int b) {
        int n = a.length;

        // search space for bitonic_point
        int low = 1, high = n-2;
        
        // binary search for bitonic_point
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            if(a[mid] > a[mid-1] && a[mid] < a[mid + 1])
                low = mid + 1;
            else high = mid - 1; 
        }
        int bitonic_point = (low - 1) + 1;
        
        // binary search for given element b
        if(a[bitonic_point] == b) return bitonic_point;
        else{
            // binary search in striclty increasing part of array
            low = 0; high = bitonic_point;
            while(low <= high)
            {
                int mid = low + (high - low)/2;
                if(a[mid] <= b)
                    low = mid + 1;
                else high = mid - 1;
            }
            int ans = low - 1;
            if(ans >=0 && a[ans] == b) return ans;
            else if(ans < 0 && a[ans + 1] == b) return ans +1;
        }

        // binary search in striclty decreasing part of array
        low = bitonic_point; high = n-1;
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            if(a[mid] >= b)
                low = mid + 1;
            else high = mid - 1;
        }
        if(a[low - 1] == b) return low - 1;

        return -1;
    }
}

/// n is size of search space(for bitonic_point) = input array size
/// TC = since only binary search is used = O(log n)
/// SC = no extra space = O(1)